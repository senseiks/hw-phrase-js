/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Job, JobCompleteParameters, JobCreateParameters, JobDetails, JobKeysCreateParameters, JobReopenParameters, JobStartParameters, JobUpdateParameters } from '../models';
export interface JobCompleteRequest {
    projectId: string;
    id: string;
    jobCompleteParameters: JobCompleteParameters;
    xPhraseAppOTP?: string;
}
export interface JobCreateRequest {
    projectId: string;
    jobCreateParameters: JobCreateParameters;
    xPhraseAppOTP?: string;
}
export interface JobDeleteRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface JobKeysCreateRequest {
    projectId: string;
    id: string;
    jobKeysCreateParameters: JobKeysCreateParameters;
    xPhraseAppOTP?: string;
}
export interface JobKeysDeleteRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
    translationKeyIds?: Array<string>;
}
export interface JobLockRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface JobReopenRequest {
    projectId: string;
    id: string;
    jobReopenParameters: JobReopenParameters;
    xPhraseAppOTP?: string;
}
export interface JobShowRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface JobStartRequest {
    projectId: string;
    id: string;
    jobStartParameters: JobStartParameters;
    xPhraseAppOTP?: string;
}
export interface JobUnlockRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface JobUpdateRequest {
    projectId: string;
    id: string;
    jobUpdateParameters: JobUpdateParameters;
    xPhraseAppOTP?: string;
}
export interface JobsByAccountRequest {
    accountId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
    ownedBy?: string;
    assignedTo?: string;
    state?: string;
}
export interface JobsListRequest {
    projectId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
    branch?: string;
    ownedBy?: string;
    assignedTo?: string;
    state?: string;
}
/**
 *
 */
export declare class JobsApi extends runtime.BaseAPI {
    /**
     * Mark a job as completed.
     * Complete a job
     */
    jobCompleteRaw(requestParameters: JobCompleteRequest): Promise<runtime.ApiResponse<JobDetails>>;
    /**
     * Mark a job as completed.
     * Complete a job
     */
    jobComplete(requestParameters: JobCompleteRequest): Promise<JobDetails>;
    /**
     * Create a new job.
     * Create a job
     */
    jobCreateRaw(requestParameters: JobCreateRequest): Promise<runtime.ApiResponse<JobDetails>>;
    /**
     * Create a new job.
     * Create a job
     */
    jobCreate(requestParameters: JobCreateRequest): Promise<JobDetails>;
    /**
     * Delete an existing job.
     * Delete a job
     */
    jobDeleteRaw(requestParameters: JobDeleteRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Delete an existing job.
     * Delete a job
     */
    jobDelete(requestParameters: JobDeleteRequest): Promise<any>;
    /**
     * Add multiple keys to a existing job.
     * Add keys to job
     */
    jobKeysCreateRaw(requestParameters: JobKeysCreateRequest): Promise<runtime.ApiResponse<JobDetails>>;
    /**
     * Add multiple keys to a existing job.
     * Add keys to job
     */
    jobKeysCreate(requestParameters: JobKeysCreateRequest): Promise<JobDetails>;
    /**
     * Remove multiple keys from existing job.
     * Remove keys from job
     */
    jobKeysDeleteRaw(requestParameters: JobKeysDeleteRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Remove multiple keys from existing job.
     * Remove keys from job
     */
    jobKeysDelete(requestParameters: JobKeysDeleteRequest): Promise<any>;
    /**
     * If you are the job owner, you may lock a job using this API request.
     * Lock a job
     */
    jobLockRaw(requestParameters: JobLockRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * If you are the job owner, you may lock a job using this API request.
     * Lock a job
     */
    jobLock(requestParameters: JobLockRequest): Promise<any>;
    /**
     * Mark a job as uncompleted.
     * Reopen a job
     */
    jobReopenRaw(requestParameters: JobReopenRequest): Promise<runtime.ApiResponse<JobDetails>>;
    /**
     * Mark a job as uncompleted.
     * Reopen a job
     */
    jobReopen(requestParameters: JobReopenRequest): Promise<JobDetails>;
    /**
     * Get details on a single job for a given project.
     * Get a single job
     */
    jobShowRaw(requestParameters: JobShowRequest): Promise<runtime.ApiResponse<JobDetails>>;
    /**
     * Get details on a single job for a given project.
     * Get a single job
     */
    jobShow(requestParameters: JobShowRequest): Promise<JobDetails>;
    /**
     * Starts an existing job in state draft.
     * Start a job
     */
    jobStartRaw(requestParameters: JobStartRequest): Promise<runtime.ApiResponse<JobDetails>>;
    /**
     * Starts an existing job in state draft.
     * Start a job
     */
    jobStart(requestParameters: JobStartRequest): Promise<JobDetails>;
    /**
     * If you are the job owner, you may unlock a locked job using this API request.
     * Unlock a job
     */
    jobUnlockRaw(requestParameters: JobUnlockRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * If you are the job owner, you may unlock a locked job using this API request.
     * Unlock a job
     */
    jobUnlock(requestParameters: JobUnlockRequest): Promise<any>;
    /**
     * Update an existing job.
     * Update a job
     */
    jobUpdateRaw(requestParameters: JobUpdateRequest): Promise<runtime.ApiResponse<JobDetails>>;
    /**
     * Update an existing job.
     * Update a job
     */
    jobUpdate(requestParameters: JobUpdateRequest): Promise<JobDetails>;
    /**
     * List all jobs for the given account.
     * List account jobs
     */
    jobsByAccountRaw(requestParameters: JobsByAccountRequest): Promise<runtime.ApiResponse<Array<Job>>>;
    /**
     * List all jobs for the given account.
     * List account jobs
     */
    jobsByAccount(requestParameters: JobsByAccountRequest): Promise<Array<Job>>;
    /**
     * List all jobs for the given project.
     * List jobs
     */
    jobsListRaw(requestParameters: JobsListRequest): Promise<runtime.ApiResponse<Array<Job>>>;
    /**
     * List all jobs for the given project.
     * List jobs
     */
    jobsList(requestParameters: JobsListRequest): Promise<Array<Job>>;
}
