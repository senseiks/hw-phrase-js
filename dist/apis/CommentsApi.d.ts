/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Comment, CommentCreateParameters, CommentMarkReadParameters, CommentUpdateParameters, CommentsListParameters } from '../models';
export interface CommentCreateRequest {
    projectId: string;
    keyId: string;
    commentCreateParameters: CommentCreateParameters;
    xPhraseAppOTP?: string;
    message?: string;
    localeIds?: Array<string>;
}
export interface CommentDeleteRequest {
    projectId: string;
    keyId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface CommentMarkCheckRequest {
    projectId: string;
    keyId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface CommentMarkReadRequest {
    projectId: string;
    keyId: string;
    id: string;
    commentMarkReadParameters: CommentMarkReadParameters;
    xPhraseAppOTP?: string;
}
export interface CommentMarkUnreadRequest {
    projectId: string;
    keyId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface CommentShowRequest {
    projectId: string;
    keyId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface CommentUpdateRequest {
    projectId: string;
    keyId: string;
    id: string;
    commentUpdateParameters: CommentUpdateParameters;
    xPhraseAppOTP?: string;
}
export interface CommentsListRequest {
    projectId: string;
    keyId: string;
    commentsListParameters: CommentsListParameters;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
    branch?: string;
    query?: string;
    localeIds?: Array<string>;
    filters?: Array<string>;
    order?: string;
}
/**
 *
 */
export declare class CommentsApi extends runtime.BaseAPI {
    /**
     * Create a new comment for a key.
     * Create a comment
     */
    commentCreateRaw(requestParameters: CommentCreateRequest): Promise<runtime.ApiResponse<Comment>>;
    /**
     * Create a new comment for a key.
     * Create a comment
     */
    commentCreate(requestParameters: CommentCreateRequest): Promise<Comment>;
    /**
     * Delete an existing comment.
     * Delete a comment
     */
    commentDeleteRaw(requestParameters: CommentDeleteRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Delete an existing comment.
     * Delete a comment
     */
    commentDelete(requestParameters: CommentDeleteRequest): Promise<any>;
    /**
     * Check if comment was marked as read. Returns 204 if read, 404 if unread.
     * Check if comment is read
     */
    commentMarkCheckRaw(requestParameters: CommentMarkCheckRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Check if comment was marked as read. Returns 204 if read, 404 if unread.
     * Check if comment is read
     */
    commentMarkCheck(requestParameters: CommentMarkCheckRequest): Promise<any>;
    /**
     * Mark a comment as read.
     * Mark a comment as read
     */
    commentMarkReadRaw(requestParameters: CommentMarkReadRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Mark a comment as read.
     * Mark a comment as read
     */
    commentMarkRead(requestParameters: CommentMarkReadRequest): Promise<any>;
    /**
     * Mark a comment as unread.
     * Mark a comment as unread
     */
    commentMarkUnreadRaw(requestParameters: CommentMarkUnreadRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Mark a comment as unread.
     * Mark a comment as unread
     */
    commentMarkUnread(requestParameters: CommentMarkUnreadRequest): Promise<any>;
    /**
     * Get details on a single comment.
     * Get a single comment
     */
    commentShowRaw(requestParameters: CommentShowRequest): Promise<runtime.ApiResponse<Comment>>;
    /**
     * Get details on a single comment.
     * Get a single comment
     */
    commentShow(requestParameters: CommentShowRequest): Promise<Comment>;
    /**
     * Update an existing comment.
     * Update a comment
     */
    commentUpdateRaw(requestParameters: CommentUpdateRequest): Promise<runtime.ApiResponse<Comment>>;
    /**
     * Update an existing comment.
     * Update a comment
     */
    commentUpdate(requestParameters: CommentUpdateRequest): Promise<Comment>;
    /**
     * List all comments for a key.
     * List comments
     */
    commentsListRaw(requestParameters: CommentsListRequest): Promise<runtime.ApiResponse<Array<Comment>>>;
    /**
     * List all comments for a key.
     * List comments
     */
    commentsList(requestParameters: CommentsListRequest): Promise<Array<Comment>>;
}
