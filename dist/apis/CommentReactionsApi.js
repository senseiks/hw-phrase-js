"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommentReactionsApi = void 0;
var runtime = require("../runtime");
var models_1 = require("../models");
/**
 *
 */
var CommentReactionsApi = /** @class */ (function (_super) {
    __extends(CommentReactionsApi, _super);
    function CommentReactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new reaction for a comment.
     * Create a reaction
     */
    CommentReactionsApi.prototype.reactionCreateRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                            throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling reactionCreate.');
                        }
                        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
                            throw new runtime.RequiredError('keyId', 'Required parameter requestParameters.keyId was null or undefined when calling reactionCreate.');
                        }
                        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
                            throw new runtime.RequiredError('commentId', 'Required parameter requestParameters.commentId was null or undefined when calling reactionCreate.');
                        }
                        queryParameters = {};
                        if (requestParameters.branch !== undefined) {
                            queryParameters['branch'] = requestParameters.branch;
                        }
                        if (requestParameters.emoji !== undefined) {
                            queryParameters['emoji'] = requestParameters.emoji;
                        }
                        headerParameters = {};
                        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
                            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
                        }
                        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/projects/{project_id}/keys/{key_id}/comments/{comment_id}/reactions".replace("{".concat("project_id", "}"), encodeURIComponent(String(requestParameters.projectId))).replace("{".concat("key_id", "}"), encodeURIComponent(String(requestParameters.keyId))).replace("{".concat("comment_id", "}"), encodeURIComponent(String(requestParameters.commentId))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.CommentReactionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create a new reaction for a comment.
     * Create a reaction
     */
    CommentReactionsApi.prototype.reactionCreate = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.reactionCreateRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete an existing reaction.
     * Delete a reaction
     */
    CommentReactionsApi.prototype.reactionDeleteRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                            throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling reactionDelete.');
                        }
                        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
                            throw new runtime.RequiredError('keyId', 'Required parameter requestParameters.keyId was null or undefined when calling reactionDelete.');
                        }
                        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
                            throw new runtime.RequiredError('commentId', 'Required parameter requestParameters.commentId was null or undefined when calling reactionDelete.');
                        }
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling reactionDelete.');
                        }
                        queryParameters = {};
                        if (requestParameters.branch !== undefined) {
                            queryParameters['branch'] = requestParameters.branch;
                        }
                        headerParameters = {};
                        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
                            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
                        }
                        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/projects/{project_id}/keys/{key_id}/comments/{comment_id}/reactions/{id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(requestParameters.projectId))).replace("{".concat("key_id", "}"), encodeURIComponent(String(requestParameters.keyId))).replace("{".concat("comment_id", "}"), encodeURIComponent(String(requestParameters.commentId))).replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.TextApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete an existing reaction.
     * Delete a reaction
     */
    CommentReactionsApi.prototype.reactionDelete = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.reactionDeleteRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get details on a single reaction.
     * Get a single reaction
     */
    CommentReactionsApi.prototype.reactionShowRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                            throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling reactionShow.');
                        }
                        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
                            throw new runtime.RequiredError('keyId', 'Required parameter requestParameters.keyId was null or undefined when calling reactionShow.');
                        }
                        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
                            throw new runtime.RequiredError('commentId', 'Required parameter requestParameters.commentId was null or undefined when calling reactionShow.');
                        }
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling reactionShow.');
                        }
                        queryParameters = {};
                        if (requestParameters.branch !== undefined) {
                            queryParameters['branch'] = requestParameters.branch;
                        }
                        headerParameters = {};
                        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
                            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
                        }
                        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/projects/{project_id}/keys/{key_id}/comments/{comment_id}/reactions/{id}".replace("{".concat("project_id", "}"), encodeURIComponent(String(requestParameters.projectId))).replace("{".concat("key_id", "}"), encodeURIComponent(String(requestParameters.keyId))).replace("{".concat("comment_id", "}"), encodeURIComponent(String(requestParameters.commentId))).replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, models_1.CommentReactionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get details on a single reaction.
     * Get a single reaction
     */
    CommentReactionsApi.prototype.reactionShow = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.reactionShowRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List all reactions for a comment.
     * List reactions
     */
    CommentReactionsApi.prototype.reactionsListRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
                            throw new runtime.RequiredError('projectId', 'Required parameter requestParameters.projectId was null or undefined when calling reactionsList.');
                        }
                        if (requestParameters.keyId === null || requestParameters.keyId === undefined) {
                            throw new runtime.RequiredError('keyId', 'Required parameter requestParameters.keyId was null or undefined when calling reactionsList.');
                        }
                        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
                            throw new runtime.RequiredError('commentId', 'Required parameter requestParameters.commentId was null or undefined when calling reactionsList.');
                        }
                        queryParameters = {};
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.perPage !== undefined) {
                            queryParameters['per_page'] = requestParameters.perPage;
                        }
                        if (requestParameters.branch !== undefined) {
                            queryParameters['branch'] = requestParameters.branch;
                        }
                        headerParameters = {};
                        if (requestParameters.xPhraseAppOTP !== undefined && requestParameters.xPhraseAppOTP !== null) {
                            headerParameters['X-PhraseApp-OTP'] = String(requestParameters.xPhraseAppOTP);
                        }
                        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
                            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
                        }
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/projects/{project_id}/keys/{key_id}/comments/{comment_id}/reactions".replace("{".concat("project_id", "}"), encodeURIComponent(String(requestParameters.projectId))).replace("{".concat("key_id", "}"), encodeURIComponent(String(requestParameters.keyId))).replace("{".concat("comment_id", "}"), encodeURIComponent(String(requestParameters.commentId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(models_1.CommentReactionFromJSON); })];
                }
            });
        });
    };
    /**
     * List all reactions for a comment.
     * List reactions
     */
    CommentReactionsApi.prototype.reactionsList = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.reactionsListRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return CommentReactionsApi;
}(runtime.BaseAPI));
exports.CommentReactionsApi = CommentReactionsApi;
