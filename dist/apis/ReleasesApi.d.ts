/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Release, ReleaseCreateParameters, ReleasePreview, ReleaseUpdateParameters } from '../models';
export interface ReleaseCreateRequest {
    accountId: string;
    distributionId: string;
    releaseCreateParameters: ReleaseCreateParameters;
    xPhraseAppOTP?: string;
}
export interface ReleaseDeleteRequest {
    accountId: string;
    distributionId: string;
    id: string;
    xPhraseAppOTP?: string;
}
export interface ReleasePublishRequest {
    accountId: string;
    distributionId: string;
    id: string;
    xPhraseAppOTP?: string;
}
export interface ReleaseShowRequest {
    accountId: string;
    distributionId: string;
    id: string;
    xPhraseAppOTP?: string;
}
export interface ReleaseUpdateRequest {
    accountId: string;
    distributionId: string;
    id: string;
    releaseUpdateParameters: ReleaseUpdateParameters;
    xPhraseAppOTP?: string;
}
export interface ReleasesListRequest {
    accountId: string;
    distributionId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}
/**
 *
 */
export declare class ReleasesApi extends runtime.BaseAPI {
    /**
     * Create a new release.
     * Create a release
     */
    releaseCreateRaw(requestParameters: ReleaseCreateRequest): Promise<runtime.ApiResponse<Release>>;
    /**
     * Create a new release.
     * Create a release
     */
    releaseCreate(requestParameters: ReleaseCreateRequest): Promise<Release>;
    /**
     * Delete an existing release.
     * Delete a release
     */
    releaseDeleteRaw(requestParameters: ReleaseDeleteRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Delete an existing release.
     * Delete a release
     */
    releaseDelete(requestParameters: ReleaseDeleteRequest): Promise<any>;
    /**
     * Publish a release for production.
     * Publish a release
     */
    releasePublishRaw(requestParameters: ReleasePublishRequest): Promise<runtime.ApiResponse<Release>>;
    /**
     * Publish a release for production.
     * Publish a release
     */
    releasePublish(requestParameters: ReleasePublishRequest): Promise<Release>;
    /**
     * Get details on a single release.
     * Get a single release
     */
    releaseShowRaw(requestParameters: ReleaseShowRequest): Promise<runtime.ApiResponse<Release>>;
    /**
     * Get details on a single release.
     * Get a single release
     */
    releaseShow(requestParameters: ReleaseShowRequest): Promise<Release>;
    /**
     * Update an existing release.
     * Update a release
     */
    releaseUpdateRaw(requestParameters: ReleaseUpdateRequest): Promise<runtime.ApiResponse<Release>>;
    /**
     * Update an existing release.
     * Update a release
     */
    releaseUpdate(requestParameters: ReleaseUpdateRequest): Promise<Release>;
    /**
     * List all releases for the given distribution.
     * List releases
     */
    releasesListRaw(requestParameters: ReleasesListRequest): Promise<runtime.ApiResponse<Array<ReleasePreview>>>;
    /**
     * List all releases for the given distribution.
     * List releases
     */
    releasesList(requestParameters: ReleasesListRequest): Promise<Array<ReleasePreview>>;
}
