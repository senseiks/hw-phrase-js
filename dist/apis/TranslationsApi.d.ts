/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AffectedCount, Translation, TranslationCreateParameters, TranslationDetails, TranslationExcludeParameters, TranslationIncludeParameters, TranslationReviewParameters, TranslationUnverifyParameters, TranslationUpdateParameters, TranslationVerifyParameters, TranslationsExcludeParameters, TranslationsIncludeParameters, TranslationsReviewParameters, TranslationsSearchParameters, TranslationsUnverifyParameters, TranslationsVerifyParameters } from '../models';
export interface TranslationCreateRequest {
    projectId: string;
    translationCreateParameters: TranslationCreateParameters;
    xPhraseAppOTP?: string;
}
export interface TranslationExcludeRequest {
    projectId: string;
    id: string;
    translationExcludeParameters: TranslationExcludeParameters;
    xPhraseAppOTP?: string;
}
export interface TranslationIncludeRequest {
    projectId: string;
    id: string;
    translationIncludeParameters: TranslationIncludeParameters;
    xPhraseAppOTP?: string;
}
export interface TranslationReviewRequest {
    projectId: string;
    id: string;
    translationReviewParameters: TranslationReviewParameters;
    xPhraseAppOTP?: string;
}
export interface TranslationShowRequest {
    projectId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface TranslationUnverifyRequest {
    projectId: string;
    id: string;
    translationUnverifyParameters: TranslationUnverifyParameters;
    xPhraseAppOTP?: string;
}
export interface TranslationUpdateRequest {
    projectId: string;
    id: string;
    translationUpdateParameters: TranslationUpdateParameters;
    xPhraseAppOTP?: string;
}
export interface TranslationVerifyRequest {
    projectId: string;
    id: string;
    translationVerifyParameters: TranslationVerifyParameters;
    xPhraseAppOTP?: string;
}
export interface TranslationsByKeyRequest {
    projectId: string;
    keyId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
    branch?: string;
    sort?: string;
    order?: string;
    q?: string;
}
export interface TranslationsByLocaleRequest {
    projectId: string;
    localeId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
    branch?: string;
    sort?: string;
    order?: string;
    q?: string;
}
export interface TranslationsExcludeCollectionRequest {
    projectId: string;
    translationsExcludeParameters: TranslationsExcludeParameters;
    xPhraseAppOTP?: string;
}
export interface TranslationsIncludeCollectionRequest {
    projectId: string;
    translationsIncludeParameters: TranslationsIncludeParameters;
    xPhraseAppOTP?: string;
}
export interface TranslationsListRequest {
    projectId: string;
    xPhraseAppOTP?: string;
    ifModifiedSince?: string;
    ifNoneMatch?: string;
    page?: number;
    perPage?: number;
    branch?: string;
    sort?: string;
    order?: string;
    q?: string;
}
export interface TranslationsReviewCollectionRequest {
    projectId: string;
    translationsReviewParameters: TranslationsReviewParameters;
    xPhraseAppOTP?: string;
}
export interface TranslationsSearchRequest {
    projectId: string;
    translationsSearchParameters: TranslationsSearchParameters;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}
export interface TranslationsUnverifyCollectionRequest {
    projectId: string;
    translationsUnverifyParameters: TranslationsUnverifyParameters;
    xPhraseAppOTP?: string;
}
export interface TranslationsVerifyCollectionRequest {
    projectId: string;
    translationsVerifyParameters: TranslationsVerifyParameters;
    xPhraseAppOTP?: string;
}
/**
 *
 */
export declare class TranslationsApi extends runtime.BaseAPI {
    /**
     * Create a translation.
     * Create a translation
     */
    translationCreateRaw(requestParameters: TranslationCreateRequest): Promise<runtime.ApiResponse<TranslationDetails>>;
    /**
     * Create a translation.
     * Create a translation
     */
    translationCreate(requestParameters: TranslationCreateRequest): Promise<TranslationDetails>;
    /**
     * Set exclude from export flag on an existing translation.
     * Exclude a translation from export
     */
    translationExcludeRaw(requestParameters: TranslationExcludeRequest): Promise<runtime.ApiResponse<TranslationDetails>>;
    /**
     * Set exclude from export flag on an existing translation.
     * Exclude a translation from export
     */
    translationExclude(requestParameters: TranslationExcludeRequest): Promise<TranslationDetails>;
    /**
     * Remove exclude from export flag from an existing translation.
     * Include a translation
     */
    translationIncludeRaw(requestParameters: TranslationIncludeRequest): Promise<runtime.ApiResponse<TranslationDetails>>;
    /**
     * Remove exclude from export flag from an existing translation.
     * Include a translation
     */
    translationInclude(requestParameters: TranslationIncludeRequest): Promise<TranslationDetails>;
    /**
     * Mark an existing translation as reviewed.
     * Review a translation
     */
    translationReviewRaw(requestParameters: TranslationReviewRequest): Promise<runtime.ApiResponse<TranslationDetails>>;
    /**
     * Mark an existing translation as reviewed.
     * Review a translation
     */
    translationReview(requestParameters: TranslationReviewRequest): Promise<TranslationDetails>;
    /**
     * Get details on a single translation.
     * Get a single translation
     */
    translationShowRaw(requestParameters: TranslationShowRequest): Promise<runtime.ApiResponse<TranslationDetails>>;
    /**
     * Get details on a single translation.
     * Get a single translation
     */
    translationShow(requestParameters: TranslationShowRequest): Promise<TranslationDetails>;
    /**
     * Mark an existing translation as unverified.
     * Mark a translation as unverified
     */
    translationUnverifyRaw(requestParameters: TranslationUnverifyRequest): Promise<runtime.ApiResponse<TranslationDetails>>;
    /**
     * Mark an existing translation as unverified.
     * Mark a translation as unverified
     */
    translationUnverify(requestParameters: TranslationUnverifyRequest): Promise<TranslationDetails>;
    /**
     * Update an existing translation.
     * Update a translation
     */
    translationUpdateRaw(requestParameters: TranslationUpdateRequest): Promise<runtime.ApiResponse<TranslationDetails>>;
    /**
     * Update an existing translation.
     * Update a translation
     */
    translationUpdate(requestParameters: TranslationUpdateRequest): Promise<TranslationDetails>;
    /**
     * Verify an existing translation.
     * Verify a translation
     */
    translationVerifyRaw(requestParameters: TranslationVerifyRequest): Promise<runtime.ApiResponse<TranslationDetails>>;
    /**
     * Verify an existing translation.
     * Verify a translation
     */
    translationVerify(requestParameters: TranslationVerifyRequest): Promise<TranslationDetails>;
    /**
     * List translations for a specific key.
     * List translations by key
     */
    translationsByKeyRaw(requestParameters: TranslationsByKeyRequest): Promise<runtime.ApiResponse<Array<Translation>>>;
    /**
     * List translations for a specific key.
     * List translations by key
     */
    translationsByKey(requestParameters: TranslationsByKeyRequest): Promise<Array<Translation>>;
    /**
     * List translations for a specific locale. If you want to download all translations for one locale we recommend to use the <code>locales#download</code> endpoint.
     * List translations by locale
     */
    translationsByLocaleRaw(requestParameters: TranslationsByLocaleRequest): Promise<runtime.ApiResponse<Array<Translation>>>;
    /**
     * List translations for a specific locale. If you want to download all translations for one locale we recommend to use the <code>locales#download</code> endpoint.
     * List translations by locale
     */
    translationsByLocale(requestParameters: TranslationsByLocaleRequest): Promise<Array<Translation>>;
    /**
     * Exclude translations matching query from locale export.
     * Exclude translations by query
     */
    translationsExcludeCollectionRaw(requestParameters: TranslationsExcludeCollectionRequest): Promise<runtime.ApiResponse<AffectedCount>>;
    /**
     * Exclude translations matching query from locale export.
     * Exclude translations by query
     */
    translationsExcludeCollection(requestParameters: TranslationsExcludeCollectionRequest): Promise<AffectedCount>;
    /**
     * Include translations matching query in locale export.
     * Include translations by query
     */
    translationsIncludeCollectionRaw(requestParameters: TranslationsIncludeCollectionRequest): Promise<runtime.ApiResponse<AffectedCount>>;
    /**
     * Include translations matching query in locale export.
     * Include translations by query
     */
    translationsIncludeCollection(requestParameters: TranslationsIncludeCollectionRequest): Promise<AffectedCount>;
    /**
     * List translations for the given project. If you want to download all translations for one locale we recommend to use the <code>locales#download</code> endpoint.
     * List all translations
     */
    translationsListRaw(requestParameters: TranslationsListRequest): Promise<runtime.ApiResponse<Array<Translation>>>;
    /**
     * List translations for the given project. If you want to download all translations for one locale we recommend to use the <code>locales#download</code> endpoint.
     * List all translations
     */
    translationsList(requestParameters: TranslationsListRequest): Promise<Array<Translation>>;
    /**
     * Review translations matching query.
     * Review translations selected by query
     */
    translationsReviewCollectionRaw(requestParameters: TranslationsReviewCollectionRequest): Promise<runtime.ApiResponse<AffectedCount>>;
    /**
     * Review translations matching query.
     * Review translations selected by query
     */
    translationsReviewCollection(requestParameters: TranslationsReviewCollectionRequest): Promise<AffectedCount>;
    /**
     * Search translations for the given project. Provides the same search interface as <code>translations#index</code> but allows POST requests to avoid limitations imposed by GET requests. If you want to download all translations for one locale we recommend to use the <code>locales#download</code> endpoint.
     * Search translations
     */
    translationsSearchRaw(requestParameters: TranslationsSearchRequest): Promise<runtime.ApiResponse<Array<Translation>>>;
    /**
     * Search translations for the given project. Provides the same search interface as <code>translations#index</code> but allows POST requests to avoid limitations imposed by GET requests. If you want to download all translations for one locale we recommend to use the <code>locales#download</code> endpoint.
     * Search translations
     */
    translationsSearch(requestParameters: TranslationsSearchRequest): Promise<Array<Translation>>;
    /**
     * Mark translations matching query as unverified.
     * Unverify translations by query
     */
    translationsUnverifyCollectionRaw(requestParameters: TranslationsUnverifyCollectionRequest): Promise<runtime.ApiResponse<AffectedCount>>;
    /**
     * Mark translations matching query as unverified.
     * Unverify translations by query
     */
    translationsUnverifyCollection(requestParameters: TranslationsUnverifyCollectionRequest): Promise<AffectedCount>;
    /**
     * Verify translations matching query.
     * Verify translations by query
     */
    translationsVerifyCollectionRaw(requestParameters: TranslationsVerifyCollectionRequest): Promise<runtime.ApiResponse<AffectedCount>>;
    /**
     * Verify translations matching query.
     * Verify translations by query
     */
    translationsVerifyCollection(requestParameters: TranslationsVerifyCollectionRequest): Promise<AffectedCount>;
}
