/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Member, MemberProjectDetail, MemberUpdateParameters, MemberUpdateSettingsParameters } from '../models';
export interface MemberDeleteRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}
export interface MemberShowRequest {
    accountId: string;
    id: string;
    xPhraseAppOTP?: string;
}
export interface MemberUpdateRequest {
    accountId: string;
    id: string;
    memberUpdateParameters: MemberUpdateParameters;
    xPhraseAppOTP?: string;
}
export interface MemberUpdateSettingsRequest {
    projectId: string;
    id: string;
    memberUpdateSettingsParameters: MemberUpdateSettingsParameters;
    xPhraseAppOTP?: string;
}
export interface MembersListRequest {
    accountId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}
/**
 *
 */
export declare class MembersApi extends runtime.BaseAPI {
    /**
     * Remove a user from the account. The user will be removed from the account but not deleted from Phrase. Access token scope must include <code>team.manage</code>.
     * Remove a user from the account
     */
    memberDeleteRaw(requestParameters: MemberDeleteRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Remove a user from the account. The user will be removed from the account but not deleted from Phrase. Access token scope must include <code>team.manage</code>.
     * Remove a user from the account
     */
    memberDelete(requestParameters: MemberDeleteRequest): Promise<any>;
    /**
     * Get details on a single user in the account. Access token scope must include <code>team.manage</code>.
     * Get single member
     */
    memberShowRaw(requestParameters: MemberShowRequest): Promise<runtime.ApiResponse<Member>>;
    /**
     * Get details on a single user in the account. Access token scope must include <code>team.manage</code>.
     * Get single member
     */
    memberShow(requestParameters: MemberShowRequest): Promise<Member>;
    /**
     * Update user permissions in the account. Developers and translators need <code>project_ids</code> and <code>locale_ids</code> assigned to access them. Access token scope must include <code>team.manage</code>.
     * Update a member
     */
    memberUpdateRaw(requestParameters: MemberUpdateRequest): Promise<runtime.ApiResponse<Member>>;
    /**
     * Update user permissions in the account. Developers and translators need <code>project_ids</code> and <code>locale_ids</code> assigned to access them. Access token scope must include <code>team.manage</code>.
     * Update a member
     */
    memberUpdate(requestParameters: MemberUpdateRequest): Promise<Member>;
    /**
     * Update user settings in the project. Access token scope must include <code>team.manage</code>.
     * Update a member\'s project settings
     */
    memberUpdateSettingsRaw(requestParameters: MemberUpdateSettingsRequest): Promise<runtime.ApiResponse<MemberProjectDetail>>;
    /**
     * Update user settings in the project. Access token scope must include <code>team.manage</code>.
     * Update a member\'s project settings
     */
    memberUpdateSettings(requestParameters: MemberUpdateSettingsRequest): Promise<MemberProjectDetail>;
    /**
     * Get all users active in the account. It also lists resources like projects and locales the member has access to. In case nothing is shown the default access from the role is used. Access token scope must include <code>team.manage</code>.
     * List members
     */
    membersListRaw(requestParameters: MembersListRequest): Promise<runtime.ApiResponse<Array<Member>>>;
    /**
     * Get all users active in the account. It also lists resources like projects and locales the member has access to. In case nothing is shown the default access from the role is used. Access token scope must include <code>team.manage</code>.
     * List members
     */
    membersList(requestParameters: MembersListRequest): Promise<Array<Member>>;
}
