/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Comment, RepliesListParameters } from '../models';
export interface RepliesListRequest {
    projectId: string;
    keyId: string;
    commentId: string;
    repliesListParameters: RepliesListParameters;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
    branch?: string;
    query?: string;
    filters?: Array<string>;
    order?: string;
}
export interface ReplyCreateRequest {
    projectId: string;
    keyId: string;
    commentId: string;
    xPhraseAppOTP?: string;
    branch?: string;
    message?: string;
}
export interface ReplyDeleteRequest {
    projectId: string;
    keyId: string;
    commentId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface ReplyMarkAsReadRequest {
    projectId: string;
    keyId: string;
    commentId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface ReplyMarkAsUnreadRequest {
    projectId: string;
    keyId: string;
    commentId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
export interface ReplyShowRequest {
    projectId: string;
    keyId: string;
    commentId: string;
    id: string;
    xPhraseAppOTP?: string;
    branch?: string;
}
/**
 *
 */
export declare class CommentRepliesApi extends runtime.BaseAPI {
    /**
     * List all replies for a comment.
     * List replies
     */
    repliesListRaw(requestParameters: RepliesListRequest): Promise<runtime.ApiResponse<Array<Comment>>>;
    /**
     * List all replies for a comment.
     * List replies
     */
    repliesList(requestParameters: RepliesListRequest): Promise<Array<Comment>>;
    /**
     * Create a new reply for a comment.
     * Create a reply
     */
    replyCreateRaw(requestParameters: ReplyCreateRequest): Promise<runtime.ApiResponse<Comment>>;
    /**
     * Create a new reply for a comment.
     * Create a reply
     */
    replyCreate(requestParameters: ReplyCreateRequest): Promise<Comment>;
    /**
     * Delete an existing reply.
     * Delete a reply
     */
    replyDeleteRaw(requestParameters: ReplyDeleteRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Delete an existing reply.
     * Delete a reply
     */
    replyDelete(requestParameters: ReplyDeleteRequest): Promise<any>;
    /**
     * Mark a reply as read.
     * Mark a reply as read
     */
    replyMarkAsReadRaw(requestParameters: ReplyMarkAsReadRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Mark a reply as read.
     * Mark a reply as read
     */
    replyMarkAsRead(requestParameters: ReplyMarkAsReadRequest): Promise<any>;
    /**
     * Mark a reply as unread.
     * Mark a reply as unread
     */
    replyMarkAsUnreadRaw(requestParameters: ReplyMarkAsUnreadRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Mark a reply as unread.
     * Mark a reply as unread
     */
    replyMarkAsUnread(requestParameters: ReplyMarkAsUnreadRequest): Promise<any>;
    /**
     * Get details on a single reply.
     * Get a single reply
     */
    replyShowRaw(requestParameters: ReplyShowRequest): Promise<runtime.ApiResponse<Comment>>;
    /**
     * Get details on a single reply.
     * Get a single reply
     */
    replyShow(requestParameters: ReplyShowRequest): Promise<Comment>;
}
