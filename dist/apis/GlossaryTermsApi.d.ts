/**
 * Phrase Strings API Reference
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@phrase.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { GlossaryTerm, GlossaryTermCreateParameters, GlossaryTermUpdateParameters } from '../models';
export interface GlossaryTermCreateRequest {
    accountId: string;
    glossaryId: string;
    glossaryTermCreateParameters: GlossaryTermCreateParameters;
    xPhraseAppOTP?: string;
}
export interface GlossaryTermDeleteRequest {
    accountId: string;
    glossaryId: string;
    id: string;
    xPhraseAppOTP?: string;
}
export interface GlossaryTermShowRequest {
    accountId: string;
    glossaryId: string;
    id: string;
    xPhraseAppOTP?: string;
}
export interface GlossaryTermUpdateRequest {
    accountId: string;
    glossaryId: string;
    id: string;
    glossaryTermUpdateParameters: GlossaryTermUpdateParameters;
    xPhraseAppOTP?: string;
}
export interface GlossaryTermsListRequest {
    accountId: string;
    glossaryId: string;
    xPhraseAppOTP?: string;
    page?: number;
    perPage?: number;
}
/**
 *
 */
export declare class GlossaryTermsApi extends runtime.BaseAPI {
    /**
     * Create a new term in a term base (previously: glossary).
     * Create a term
     */
    glossaryTermCreateRaw(requestParameters: GlossaryTermCreateRequest): Promise<runtime.ApiResponse<GlossaryTerm>>;
    /**
     * Create a new term in a term base (previously: glossary).
     * Create a term
     */
    glossaryTermCreate(requestParameters: GlossaryTermCreateRequest): Promise<GlossaryTerm>;
    /**
     * Delete an existing term in a term base (previously: glossary).
     * Delete a term
     */
    glossaryTermDeleteRaw(requestParameters: GlossaryTermDeleteRequest): Promise<runtime.ApiResponse<any>>;
    /**
     * Delete an existing term in a term base (previously: glossary).
     * Delete a term
     */
    glossaryTermDelete(requestParameters: GlossaryTermDeleteRequest): Promise<any>;
    /**
     * Get details for a single term in the term base (previously: glossary).
     * Get a single term
     */
    glossaryTermShowRaw(requestParameters: GlossaryTermShowRequest): Promise<runtime.ApiResponse<GlossaryTerm>>;
    /**
     * Get details for a single term in the term base (previously: glossary).
     * Get a single term
     */
    glossaryTermShow(requestParameters: GlossaryTermShowRequest): Promise<GlossaryTerm>;
    /**
     * Update an existing term in a term base (previously: glossary).
     * Update a term
     */
    glossaryTermUpdateRaw(requestParameters: GlossaryTermUpdateRequest): Promise<runtime.ApiResponse<GlossaryTerm>>;
    /**
     * Update an existing term in a term base (previously: glossary).
     * Update a term
     */
    glossaryTermUpdate(requestParameters: GlossaryTermUpdateRequest): Promise<GlossaryTerm>;
    /**
     * List all terms in term bases (previously: glossary) that the current user has access to.
     * List terms
     */
    glossaryTermsListRaw(requestParameters: GlossaryTermsListRequest): Promise<runtime.ApiResponse<Array<GlossaryTerm>>>;
    /**
     * List all terms in term bases (previously: glossary) that the current user has access to.
     * List terms
     */
    glossaryTermsList(requestParameters: GlossaryTermsListRequest): Promise<Array<GlossaryTerm>>;
}
